#include "stdafx.h"

struct Screen
{
    int32_t DesktopResW;
    int32_t DesktopResH;
    int32_t Width;
    int32_t Height;
    float fWidth;
    float fHeight;
    float fCustomFieldOfView;
    float fCutOffArea;
    float fAspectRatio;
    float fHudOffset;
    float fHudOffsetReal;
    int32_t Width43;
    float fWidth43;
    float fGameAspectRatio;
    float fCenterPos;
    int32_t* FMVStatus;
    bool bFixFMVs;
} Screen;

enum ScreenModes
{
    LETTERBOX = 0,
    UNKNOWN = 1,
    WIDE16BY9 = 2
};

void copyControlsData(uint8_t* dest);

void Init()
{
    CIniReader iniReader("");
    Screen.fCustomFieldOfView = iniReader.ReadFloat("MAIN", "FOVFactor", 1.0f);
    static float fDrawDistanceFactor = iniReader.ReadFloat("MAIN", "DrawDistanceFactor", 1.0f);
    int32_t nMinResX = iniReader.ReadInteger("MAIN", "MinResX", 0);
    int32_t nMinResY = iniReader.ReadInteger("MAIN", "MinResY", 0);

    std::tie(Screen.DesktopResW, Screen.DesktopResH) = GetDesktopRes();

    //uncapping resolutions
    auto pattern = hook::pattern("68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 57 8B DE E8 ? ? ? ? 85 C0"); //54A5A0
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 0), INT_MAX, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 5), INT_MAX, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 10), nMinResY, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 15), nMinResX, true);

    pattern = hook::pattern("68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 50 E8 ? ? ? ? 85"); //57F665
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 0), INT_MAX, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 5), INT_MAX, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 10), nMinResY, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 15), nMinResX, true);

    pattern = hook::pattern("68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 50 33 DB E8"); //5C9288
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 0), INT_MAX, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 5), INT_MAX, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 10), nMinResY, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(1 + 15), nMinResX, true);

    //default to desktop res
    pattern = hook::pattern("EB ? C7 04 24 ? ? ? ? C7 44 24 04"); //54A7C7
    injector::MakeNOP(pattern.get_first(0), 2, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(5 + 0), Screen.DesktopResW, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(5 + 8), Screen.DesktopResH, true);
    pattern = hook::pattern("56 57 56 56 68 ? ? ? ? 68 ? ? ? ? 56 56"); //576C6B
    injector::WriteMemory(pattern.get_first<int32_t*>(5), Screen.DesktopResH, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(10), Screen.DesktopResW, true);

    //1024x768 black screen fix
    pattern = hook::pattern("C7 44 24 28 ? ? ? ? C7 44 24 2C ? ? ? ? C7 44 24 30 ? ? ? ? C7 44 24 34 ? ? ? ? 89 16 E8"); //0x57F6DF
    injector::WriteMemory(pattern.get_first<int32_t*>(4 + 0), Screen.DesktopResW, true);
    injector::WriteMemory(pattern.get_first<int32_t*>(4 + 8), Screen.DesktopResH, true);

    static auto pGameHwnd = *hook::get_pattern<HWND*>("A1 ? ? ? ? 85 C0 55 8B E9", 1); //0x7EC218
    static auto pAspectRatio = *hook::get_pattern<float*>("D9 05 ? ? ? ? EB ? D9 05 ? ? ? ? 8B 75 0C", 2); //78EA70
    static auto pFOV = *hook::get_pattern<float*>("D9 05 ? ? ? ? EB 06 D9 05 ? ? ? ? 33 C0", 2); //78EA78
    static auto dword_8D7DF0 = *hook::get_pattern<uintptr_t*>("8B 0D ? ? ? ? 8B 44 24 14 8D 54 24 2C", 2);
    static auto pGameResWidth = dword_8D7DF0 + 2;
    static auto pGameResHeight = dword_8D7DF0 + 3;
    //Screen.FMVStatus = *hook::get_pattern<int32_t*>("BE ? ? ? ? 33 C0 B9 20 01 00 00 8B FE F3 AB", 1) + 0x1D; // 0x70C8B8?

    static auto GetRes = []()
    {
        Screen.Width = *pGameResWidth;
        Screen.Height = *pGameResHeight;
        Screen.fWidth = static_cast<float>(Screen.Width);
        Screen.fHeight = static_cast<float>(Screen.Height);
        Screen.fAspectRatio = (Screen.fWidth / Screen.fHeight);
        Screen.Width43 = static_cast<uint32_t>(Screen.fHeight * (4.0f / 3.0f));
        Screen.fWidth43 = static_cast<float>(Screen.Width43);
        Screen.fCenterPos = ((480.0f * Screen.fAspectRatio) / 2.0f);
        Screen.fHudOffset = ((480.0f * Screen.fAspectRatio) - 640.0f) / 2.0f;
        Screen.fHudOffsetReal = (Screen.fWidth - Screen.fHeight * (4.0f / 3.0f)) / 2.0f;
        Screen.fCutOffArea = 1.0f; //?

        injector::WriteMemory<float>(pAspectRatio, Screen.fAspectRatio, true); //*pAspectRatio = Screen.fAspectRatio;
        injector::WriteMemory<float>(pFOV, AdjustFOV(1.04f, Screen.fAspectRatio) * (Screen.fCustomFieldOfView ? Screen.fCustomFieldOfView : 1.0f), true);

        Screen.fGameAspectRatio = (4.0f / 3.0f);

        static tagRECT REKT;
        REKT.left = (LONG)(((float)Screen.DesktopResW / 2.0f) - (Screen.fWidth / 2.0f));
        REKT.top = (LONG)(((float)Screen.DesktopResH / 2.0f) - (Screen.fHeight / 2.0f));
        REKT.right = (LONG)Screen.Width;
        REKT.bottom = (LONG)Screen.Height;
        SetWindowPos(*pGameHwnd, NULL, REKT.left, REKT.top, REKT.right, REKT.bottom, SWP_NOACTIVATE | SWP_NOZORDER);
    };

    pattern = hook::pattern("89 8B 80 01 00 00"); //0x5E4C73
    struct GetResHook2
    {
        void operator()(injector::reg_pack& regs)
        {
            *(uint32_t*)(regs.ebx + 0x180) = regs.ecx;
            if (Screen.Width && Screen.Height)
            {
                Screen.Width = *(uint32_t*)(regs.ebx + 0x160);
                Screen.Height = *(uint32_t*)(regs.ebx + 0x164);
            }
            GetRes();
        }
    };
    injector::MakeInline<GetResHook2>(pattern.count(2).get(0).get<void*>(0), pattern.count(2).get(0).get<void*>(6));
    injector::MakeInline<GetResHook2>(pattern.count(2).get(1).get<void*>(0), pattern.count(2).get(1).get<void*>(6));

    pattern = hook::pattern("8B 44 24 04 89 41 ? B0 01 C2 04 00"); //0x580C00
    struct MenuAspectRatioSwitchHook
    {
        void operator()(injector::reg_pack& regs)
        {
            *(uint32_t*)(regs.ecx + 0x14) = WIDE16BY9; //*(uint32_t*)(regs.esp + 0x04);
        }
    }; injector::MakeInline<MenuAspectRatioSwitchHook>(pattern.get_first(0), pattern.get_first(7));

    //2D
    pattern = hook::pattern("89 56 DC 83 C0 01 D9 5E D4 89 44 24 10"); //0x57E5BD
    static auto dword_53F06F = (uint32_t)hook::get_pattern("80 BE 40 02 00 00 00", 0);
    static auto dword_53F08A = (uint32_t)hook::get_pattern("8D 46 3C 53 E8 ? ? ? ? 5F", 9);
    static auto dword_540F2E = (uint32_t)hook::get_pattern("8D 86 9C 01 00 00 51 E8 ? ? ? ? C2", 12);
    struct HudHook
    {
        void operator()(injector::reg_pack& regs)
        {
            auto retAddr = *(uint32_t*)(regs.esp + 0x4C);
            *(uint32_t*)(regs.esi - 0x24) = regs.edx;
            regs.eax += 1;
            float temp = 0.0f;
            _asm {fstp dword ptr[temp]}
            *(float*)(regs.esi - 0x2C) = temp;

            auto x1 = *(float*)(*(DWORD*)(regs.edi + 8) + (regs.ebp - 0x30) + 0x10);
            auto x2 = *(float*)(*(DWORD *)(regs.edi + 8) + (regs.ebp - 0x30) + 24) + *(float *)((regs.ebp - 0x30) + *(DWORD *)(regs.edi + 8) + 16);
            auto x3 = *(float *)((regs.esi - 0x90) + 0x4C) + *(float *)((regs.esi - 0x90) + 0x4C);

            if (retAddr == dword_53F06F || retAddr == dword_53F08A) //radar border and overlay
            {
                //*(float*)((regs.esi - 0x90) - 0x14) /= (Screen.fAspectRatio / Screen.fGameAspectRatio) / 1.33333f;
                //*(float*)((regs.esi - 0x90) + 0x04) /= (Screen.fAspectRatio / Screen.fGameAspectRatio) / 1.33333f;
                //*(float*)((regs.esi - 0x90) + 0x1C) /= (Screen.fAspectRatio / Screen.fGameAspectRatio) / 1.33333f;
                //*(float*)((regs.esi - 0x90) + 0x34) /= (Screen.fAspectRatio / Screen.fGameAspectRatio) / 1.33333f;
                //*(float*)((regs.esi - 0x44) + 0x00) /= (Screen.fAspectRatio / Screen.fGameAspectRatio) / 1.33333f;
                //*(float*)((regs.esi - 0x2C) + 0x00) /= (Screen.fAspectRatio / Screen.fGameAspectRatio) / 1.33333f;
            }
            else
            {
                if (x1 == 0.0f && x2 == 1.0f && retAddr == dword_540F2E) //fading
                {
                    //
                }
                else
                {
                    *(float*)((regs.esi - 0x90) - 0x14) /= (Screen.fAspectRatio / Screen.fGameAspectRatio);
                    *(float*)((regs.esi - 0x90) + 0x04) /= (Screen.fAspectRatio / Screen.fGameAspectRatio);
                    *(float*)((regs.esi - 0x90) + 0x1C) /= (Screen.fAspectRatio / Screen.fGameAspectRatio);
                    *(float*)((regs.esi - 0x90) + 0x34) /= (Screen.fAspectRatio / Screen.fGameAspectRatio);
                    *(float*)((regs.esi - 0x44) + 0x00) /= (Screen.fAspectRatio / Screen.fGameAspectRatio);
                    *(float*)((regs.esi - 0x2C) + 0x00) /= (Screen.fAspectRatio / Screen.fGameAspectRatio);
                }
            }
        }
    }; injector::MakeInline<HudHook>(pattern.get_first(0), pattern.get_first(9));


    //Radar
    pattern = hook::pattern("89 9E EC 01 00 00 89 9E F0 01 00 00"); //0x53DE73
    struct RadarHook
    {
        void operator()(injector::reg_pack& regs)
        {
            *(uint32_t*)(regs.esi + 0x1EC) = regs.ebx;
            *(uint32_t*)(regs.esi + 0x1F0) = regs.ebx;

            auto t = Screen.fWidth - (128.0f * (Screen.fWidth / 640.0f)); //1596.0f;//Screen.fWidth * (1920.0 - ); //1596
            auto t2 = Screen.fWidth - t; //1920-1569=351
            auto t3 = t2 / (Screen.fAspectRatio / Screen.fGameAspectRatio); //131.625
            auto t4 = Screen.fWidth - 24.0f - 24.0f - t3;
            auto t5 = 1.0f / (Screen.fWidth / (24.0f + t3));
            auto t6 = 1.0f / (Screen.fWidth / t4);

            if (*(float*)(regs.esi + 0x0C) == 0.0f && *(float*)(regs.esi + 0x14) == 1.0f)
            {
                *(float*)(regs.esi + 0x0C) += 1.0f / (Screen.fWidth / Screen.fHudOffsetReal);
                *(float*)(regs.esi + 0x14) -= 1.0f / (Screen.fWidth / Screen.fHudOffsetReal);
                *(float*)(regs.esi + 0x14) -= 1.0f / (Screen.fWidth / Screen.fHudOffsetReal);
            }
            else
            {
                *(float*)(regs.esi + 0x0C) = t6;
                *(float*)(regs.esi + 0x14) = t5;
            }
        }
    }; injector::MakeInline<RadarHook>(pattern.get_first(0), pattern.get_first(12));

    //Object disappearance sorta fix
    pattern = hook::pattern("D9 83 80 01 00 00 ? ? ? 01 00 00");
    injector::WriteMemory<uint8_t>(pattern.count(2).get(0).get<void*>(2), 0x84i8, true); //0x57D4C2
    injector::WriteMemory<uint8_t>(pattern.count(2).get(1).get<void*>(2), 0x84i8, true); //0x57D505

    //Draw distance adjuster
    if (fDrawDistanceFactor)
    {
        pattern = hook::pattern("89 46 7C 89 4E 08 C3"); //0x4DDD68
        struct DrawDistHook
        {
            void operator()(injector::reg_pack& regs)
            {
                *(uint32_t*)(regs.esi + 0x7C) = regs.eax;
                *(uint32_t*)(regs.esi + 0x08) = regs.ecx;

                //*(float*)(regs.esi + 0x88) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0x84) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0x90) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0x94) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0xA0) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0x9C) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0xA8) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0xAC) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0xB4) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0xB8) *= fDrawDistanceFactor;
                //*(float*)(regs.esi + 0xC0) *= fDrawDistanceFactor;

                *(float*)(regs.esi + 0x44) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x48) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x4C) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x40) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x50) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x54) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x58) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x5C) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x60) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x64) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x68) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x6C) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x70) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x74) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x78) *= fDrawDistanceFactor;
                *(float*)(regs.esi + 0x7C) *= fDrawDistanceFactor;
            }
        };
        injector::MakeInline<DrawDistHook>(pattern.count(3).get(0).get<void*>(0), pattern.count(3).get(0).get<void*>(6));
        injector::MakeInline<DrawDistHook>(pattern.count(3).get(1).get<void*>(0), pattern.count(3).get(1).get<void*>(6));
        injector::MakeInline<DrawDistHook>(pattern.count(3).get(2).get<void*>(0), pattern.count(3).get(2).get<void*>(6));
    }

    //Sane default controls
    pattern = hook::pattern("89 0D ? ? ? ? 5B 83 C4 50 C3"); //0x6DEB7A
    static auto dword_7A4E5C = *hook::pattern("BE 00 40 00 00 A3").count(2).get(1).get<uint8_t*>(6);
    struct DefControlsHook
    {
        void operator()(injector::reg_pack& regs)
        {
            copyControlsData(dword_7A4E5C);
        }
    }; injector::MakeInline<DefControlsHook>(pattern.count(2).get(1).get<void*>(0), pattern.count(2).get(1).get<void*>(6));
}

CEXP void InitializeASI()
{
    std::call_once(CallbackHandler::flag, []()
    {
        CallbackHandler::RegisterCallback(Init, hook::pattern("55 8B EC 83 EC 60 53 56 57"));
    });
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD reason, LPVOID lpReserved)
{
    if (reason == DLL_PROCESS_ATTACH)
    {

    }
    return TRUE;
}

void copyControlsData(uint8_t* dest)
{
    uint8_t hexData[2576] = {
        0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x27, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x4F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x4D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x09, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0B, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
        0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xC9, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xD1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
        0x1A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1B, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x1F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x24, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x26, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x29, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,
        0x2B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xC8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xC8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x2D, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xCB, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xCB, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x02, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xCD, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xCD, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
        0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x31, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x03, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x2A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00,
        0x2C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
        0x3A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0A, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3B, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x03, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0B, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00,
        0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0C, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3D, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x03, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0D, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0D, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00,
        0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x00, 0x00
    };

    std::copy(std::begin(hexData), std::end(hexData), dest);
}